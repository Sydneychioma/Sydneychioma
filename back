from fastapi import FastAPI, HTTPException, Query
import boto3
import os
import smtplib
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

AWS_REGION = os.getenv("AWS_REGION", "us-east-2")
KNOWLEDGE_BASE_ID = os.getenv("KNOWLEDGE_BASE_ID")
MODEL_ARN = os.getenv("MODEL_ARN")

# Optional: Email for escalation
AGENT_EMAIL = os.getenv("AGENT_EMAIL", "agent@example.com")

app = FastAPI()

def get_bedrock_client():
    return boto3.client("bedrock-agent-runtime", region_name=AWS_REGION)

@app.get("/")
async def root():
    return {"message": "Welcome to the Chimdi Admission chatbot!"}

@app.get("/bedrock/query")
async def query_bedrock(text: str = Query(..., description="Input text for the model")):
    client = get_bedrock_client()
    try:
        response = client.retrieve_and_generate(
            input={"text": text},
            retrieveAndGenerateConfiguration={
                "knowledgeBaseConfiguration": {
                    "knowledgeBaseId": KNOWLEDGE_BASE_ID,
                    "modelArn": MODEL_ARN
                },
                "type": "KNOWLEDGE_BASE"
            }
        )

        response_text = response["output"]["text"]

        # Detect fallback-worthy response
        fallback_phrases = ["I don't know", "I'm not sure", "I cannot help", "I'm sorry"]
        if any(phrase in response_text.lower() for phrase in fallback_phrases):
            forward_to_agent(text)
            return {
                "response": response_text + "\n\nThis has been forwarded to an admissions officer. Youâ€™ll get a response soon."
            }

        return {"response": response_text}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


# Fallback: Notify an agent (here, via email - mock implementation)
def forward_to_agent(user_input):
    try:
        smtp = smtplib.SMTP("smtp.example.com", 587)
        smtp.starttls()
        smtp.login("bot@example.com", "your_password")
        message = f"Subject: Chatbot Escalation\n\nThe chatbot could not answer this query:\n\n{user_input}"
        smtp.sendmail("bot@example.com", AGENT_EMAIL, message)
        smtp.quit()
    except Exception as e:
        print("Failed to contact agent:", e)
